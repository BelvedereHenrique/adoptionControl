@model Desafio.Contracts.AdopterContract
<h1>Adopter</h1>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="input-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Name, "Name", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="input-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Email, "Email", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">

            <div class="input-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.AddressLine, "Address", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.AddressLine, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                    @Html.ValidationMessageFor(model => model.AddressLine, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="input-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.State, "State", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="input-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Phone, "Phone", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="input-group">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Add" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back", "Index")
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
